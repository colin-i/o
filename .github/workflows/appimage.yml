
#name: appimage

on:
 # Triggers the workflow on push or pull request events but only for the main branch
 #push:
 # branches: [ main ]
 #pull_request:
 # branches: [ main ]
 # Allows you to run this workflow manually from the Actions tab
 workflow_dispatch:
  inputs:
   ppa:
    description: "ppa sufix"

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
 # This workflow contains a single job called "build"
 build:
  # The type of runner that the job will run on
  runs-on: ubuntu-22.04
  # Steps represent a sequence of tasks that will be executed as part of the job
  steps:
   - uses: actions/checkout@v3
   #Runs a set of commands using the runners shell
   - name: Run a multi-line script
     run: |
      name=`cat debian/changelog | head -1 | grep -o ^[^\ ]*`
      name2=OCompiler
      mkdir -p AppDir

      run=runtime
      if [ ! -e "${run}" ]; then
       archfile=runtime-x86_64
       wget -c https://github.com/AppImage/type2-runtime/releases/download/continuous/${archfile}
       mv ${archfile} ${run}
      fi

      if [ ! -e "${name}.deb" ]; then
       arh=amd64
       version=`cat debian/changelog | head -1 | grep -Poe "[^\(]*(?=\))"`
       if [ ! -e "lp2.py" ]; then
        wget -q https://raw.githubusercontent.com/colin-i/test/master/lp2.py
        #is already at focal sudo apt install python3-launchpadlib
       fi
       #OUTPUT=$(python3 lp.py ppa${{ github.event.inputs.ppa }} ${dist} ${arh} ${name} ${version})
       OUTPUT=$(python3 lp2.py ppa${{ github.event.inputs.ppa }} ${name} ${version} ${arh})
       wget ${OUTPUT}/+files/${name}_${version}_${arh}.deb -O ${name}.deb
       dpkg -x ${name}.deb AppDir
      fi

      pkg=libc6-i386
      maindeb=${pkg}.deb
      if [ ! -e "${maindeb}" ]; then
       src=ro.archive.ubuntu.com
       inter=Packages
       if [ ! -e "${inter}" ]; then
        dist=`cat debian/changelog | head -1 | grep -Poe "[^ ]*(?=;)"`
        wget http://${src}/ubuntu/dists/${dist}/main/binary-amd64/${inter}.xz
        xz -d ${inter}.xz
       fi
       debfilename=`grep "^Filename.*/${pkg}_" ${inter} | tail -1 | cut -d ' ' -f 2`
       wget_url=http://${src}/ubuntu/${debfilename}
       wget ${wget_url} -O ${maindeb}
       dpkg -x ${maindeb} AppDir
       rm AppDir/usr/bin/ocompiler #a link inside an appimage
      fi

      cd AppDir
      file=AppRun
      if [ ! -e "${file}" ]; then
       echo launcher
       cat > ${file} <<EOF
      #!/bin/sh
      root_dir="\$(readlink -f "\$(dirname "\$0")")"
      if [ "\${1}" = "0" ]; then
       cmd=o
      elif [ "\${1}" = "1" ]; then
       cmd=ounused
      else
       if [ "\${1}" = "2" ]; then
        cmd=otoc
       elif [ "\${1}" = "3" ]; then
        cmd=ostrip
       else
        echo first argument: 0 for ocompiler, 1 for ounused, 2 for otoc, 3 for ostrip
        exit 1
       fi
       shift
       "\${root_dir}/usr/bin/\${cmd}" "\$@"
       exit \$?
      fi
      shift
      LD_LIBRARY_PATH="\${root_dir}/lib32"\
       "\${root_dir}/lib32/ld-linux.so.2" "\${root_dir}/usr/bin/\${cmd}" "\$@"
      EOF
       chmod 755 ${name}
      fi

      pngfile=${name}.png
      if [ ! -e "${pngfile}" ]; then
       wget https://github.com/colin-i/test/releases/download/1.5/${name}.png -O ${pngfile}
       cat > ${name}.desktop <<EOF
      [Desktop Entry]
      Type=Application
      Name=${name2}
      Exec=${name}
      Icon=${name}
      Categories=Utility
      EOF
       ln -s ${pngfile} .DirIcon
      fi

      #metadata file
      mi=usr/share/metainfo
      mif=${mi}/com.colin.${name}.appdata.xml
      if [ ! -e "${mif}" ]; then
       page=`cat ../debian/control | grep "^Homepage" | cut -d ' ' -f2`
       mkdir -p ${mi}
       cat > ${mif} <<EOF
      <?xml version="1.0" encoding="UTF-8"?>
      <!-- Copyright 2022 -->
      <component type="desktop-application">
       <id>com.colin.${name}</id>
       <metadata_license>FSFAP</metadata_license>
       <name>${name2}</name>
       <summary>O language compiler</summary>
       <description>
        <ul>
         <li>Compile code</li>
         <li>Easy language</li>
         <li>Linux/Windows x86_64/i386</li>
        </ul>
       </description>
       <url type="homepage">${page}</url>
       <content_rating/>
      </component>
      EOF
      fi
      cd ..

      if [ ! -e "${name}.AppImage" ]; then
       mksquashfs AppDir ${name}.squashfs -root-owned -noappend
       cat runtime > ${name}.AppImage
       cat ${name}.squashfs >> ${name}.AppImage
       chmod a+x ${name}.AppImage
      fi
   - name: artifact
     uses: actions/upload-artifact@master
     with:
      name: appimage
      path: ./*.AppImage
