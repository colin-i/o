
#aftercalli

function functiondef_intern(sv pbuffer,sd outfile)
	datax args#1;call get_data(pbuffer,#args)
	if args>=^1
		charx type#1
		call decl(pbuffer,outfile,#type)
		sd n=1;while n!=args
			call writec(outfile)
			call decl(pbuffer,outfile,#type)
			inc n
		end
	end
end
#function functiondef_raw(sv pbuffer)
function functiondef_extern(sv pbuffer,sd outfile)
	charx e#1;call get_char(pbuffer,#e)
	callg functiondef_intern(pbuffer,outfile)
end
#function functiondef_entry(sv pbuffer)

#D structure
function decl(sv pbuffer,sd outfile,ss ptype)
	charx field#1;call get_char(pbuffer,#field)
	if field!=(Xfile_declfield_const)
		if field=(Xfile_declfield_data)
			charx data#1;call get_char(pbuffer,#data)
		end
		call get_char(pbuffer,ptype)
		charx feature#1;call get_char(pbuffer,#feature)

		value f^byte
		value *^int      #word short
		value *^int
		value *^intByte
		value *^int      #long
		value *^intByte  #longByte
		value *^int      #longWord short*
		value *^int      #longInt  int*
		sv fn;set fn ptype#     #type is used outside
		mult fn :
		add fn #f
		set fn fn#
		call fn(outfile)

		char s=asciispace
		call write(outfile,#s,1)
	end
	datax sz#1;valuex pointer#1
	call get_string(pbuffer,#sz,#pointer)
	callg write(outfile,pointer,sz)
end
function byte(sd outfile)
	char c="char*"^
	call write(outfile,#c,\byte.c-1)
end
#function word()end
function int(sd outfile)
	char d="int"^
	call write(outfile,#d,\int.d)
end
function intByte(sd outfile)
	call write(outfile,#byte.c,\byte.c)
end
#function long()end
#function longByte()end
#function longWord()end
#function longInt()end
