
#aftercalli

#A structure
function arg(sv pbuffer,sd outfile)
	charx a#1;call get_char(pbuffer,#a)
	if a=(Xfile_arg_number)
		call number(pbuffer,outfile)
	elseif a=(Xfile_arg_varfn)
		call varfunc(pbuffer,outfile)
	elseif a=(Xfile_arg_string)
		call write_string_ex(pbuffer,outfile)
	else #Xfile_arg_call
		callg cll(pbuffer,outfile)
	end
end

#C structure
function cal(sv pbuffer,sd outfile)
	char arg_call#1;call get_char(pbuffer,#arg_call)
	datax sz#1;valuex pointer#1
	call get_string(pbuffer,#sz,#pointer)
	callg write(outfile,pointer,sz)
end

#CL structure
function cll(sv pbuffer,sd outfile)
	call cal(pbuffer,outfile)
	call writel(outfile)
	datax args#1;call get_data(pbuffer,#args)
	if args>=^1
	#need to reverse the push order
		set loop.directwrite (FALSE)
		set mems.carg_size 0
		set mems.cargx_size 0

		call carg_stamp()
		call arg(pbuffer,#mems.carg)
		call carg_stamp()
		sd n=1;while n!=args
			call arg(pbuffer,#mems.carg)
			call carg_stamp()
			inc n
		end
		set loop.directwrite (TRUE)
		call carg_resolve(outfile)
	end
	callg writer(outfile)
end
function carg_stamp()
	sd r;set r mwrite(#mems.carg_size,:,#mems.cargx)
	if r!=1
		call aftercallenable()
	end
end
function carg_resolve(sd outfile)
	sv cursor;set cursor mems.cargx_size
	add cursor mems.cargx
	decst cursor
	sd right;set right cursor#
	decst cursor
	call carg_resolve_one(cursor#,right,outfile)
	while mems.cargx!=cursor
		call writec(outfile)
		set right cursor#
		decst cursor
		call carg_resolve_one(cursor#,right,outfile)
	end
end
function carg_resolve_one(sv left,sv right,sd outfile)
	sub right left
	add left mems.carg
	callg write(outfile,left,right)
end

#V structure
function var(sv pbuffer,sd outfile)
	datax sz#1;valuex pointer#1
	call get_string(pbuffer,#sz,#pointer)
	charx suffix#1;call get_char(pbuffer,#suffix)
	if suffix=(Xfile_suffix_true)
		charx cast#1;call get_char(pbuffer,#cast)
		if cast!=(Xfile_suffix_cast_none)
			call writel(outfile)
			call writel(outfile)
			if cast=(Xfile_suffix_cast_string) #char*
				call longByte(outfile)
			elseif cast=(Xfile_suffix_cast_word) #short*
				call longWord(outfile)
			elseif cast=(Xfile_suffix_cast_data) #int*
				call longInt(outfile)
			else # Xfile_suffix_cast_value long*
				call write_long_point(outfile)
			end
			call writer(outfile)
		end
		call write(outfile,pointer,sz)
		if cast!=(Xfile_suffix_cast_none)
			call writer(outfile)
		end
		call writesl(outfile)
		char a=zr
		call write(outfile,#a,1)
		call writesr(outfile)
	else
		callg write(outfile,pointer,sz)
	end
	#Xfile_suffix_no Xfile_suffix_notasuffix
end

#VF structure
function varfunc(sv pbuffer,sd outfile)
	charx prefix#1;call get_char(pbuffer,#prefix)
	if prefix=(Xfile_arg_varfn_prefix_yes)
		call write(outfile,#and.a,1)
	end
	charx colon#1;call get_char(pbuffer,#colon)
	charx d#1
	datax szf#1;valuex func#1
	if colon=(Xfile_arg_varfn_colon_yes)
		charx dt#1;call get_char(pbuffer,#dt)
		if dt=(Xfile_arg_varfn_dot_yes)
			call get_string(pbuffer,#szf,#func)
		end
		datax szv#1;valuex vr#1
		call get_string(pbuffer,#szv,#vr)
		charx suffix#1;call get_char(pbuffer,#suffix)

		call get_char(pbuffer,#d)
		if d=(Xfile_arg_varfn_dot_yes) #DoT ((struct a*)c)->b
			datax sz#1;valuex pointer#1
			call get_string(pbuffer,#sz,#pointer)
			call writel(outfile)
			call writel(outfile)
			call write(outfile,#functiondef_intern.a,\functiondef_intern.a)
			call write(outfile,pointer,sz)
			call write(outfile,#main.point,1)
			call writer(outfile)
			call write(outfile,vr,szv)
			call writer(outfile)
			char a="->"^
			call write(outfile,#a,\.a)
		end
		call var(pbuffer,outfile)
	else
		call get_char(pbuffer,#d)
		if d=(Xfile_arg_varfn_dot_no)
			call var(pbuffer,outfile)
		else #DoT structure and there are more DoT
			call get_string(pbuffer,#szf,#func)
			callg var(pbuffer,outfile)
		end
	end
end

function write_string(sd outfile,sd is_multiline,sd sz,ss pointer)
	if is_multiline=(Xfile_string_multiline_yes)
		#if memmem(pointer,sz,)",2)=(NULL) #at o can \n to add new line and not mark as multiline
		char a="R";call write(outfile,#a,1)
		call writeq(outfile)
		call writel(outfile)
		call write(outfile,pointer,sz) #can't be sz 0, it is multiline
		call writer(outfile)
		callg writeq(outfile)
		ret
	end
	call writeq(outfile)
	char map1={zr,zr,           zr,zr,zr,zr,zr,zr,zr,asciit,asciin,zr,zr,asciir,zr,zr,zr,zr,zr,zr,zr,zr,zr,zr,zr,zr,zr,zr,zr,      zr,zr,zr} #at 0 can be asciizero but \000 at c is 0
	char    *={0, 0,asciidquote,0, 0, 0, 0, 0, 0, 0, 0,     0,     0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,       0, 0, 0} #\xhh... , then \x0acan't will be \x0aca
	char    *={0, 0,            0, 0, 0, 0, 0, 0, 0, 0,     0,     0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, asciibs, 0, 0, 0}
	char    *={0, 0,            0, 0, 0, 0, 0, 0, 0, 0,     0,     0, 0, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,       0, 0, zr}
	char    *={zr,zr,           zr,zr,zr,zr,zr,zr,zr,zr,    zr,    zr,zr,zr,    zr,zr,zr,zr,zr,zr,zr,zr,zr,zr,zr,zr,zr,zr,zr,      zr,zr,zr}
	char    *={zr,zr,           zr,zr,zr,zr,zr,zr,zr,zr,    zr,    zr,zr,zr,    zr,zr,zr,zr,zr,zr,zr,zr,zr,zr,zr,zr,zr,zr,zr,      zr,zr,zr}
	char    *={zr,zr,           zr,zr,zr,zr,zr,zr,zr,zr,    zr,    zr,zr,zr,    zr,zr,zr,zr,zr,zr,zr,zr,zr,zr,zr,zr,zr,zr,zr,      zr,zr,zr}
	char    *={zr,zr,           zr,zr,zr,zr,zr,zr,zr,zr,    zr,    zr,zr,zr,    zr,zr,zr,zr,zr,zr,zr,zr,zr,zr,zr,zr,zr,zr,zr,      zr,zr,zr}
	sd term;set term pointer;add term sz
	sd start;set start pointer
	while pointer!=term
		ss map^map1
		add map pointer#
		if map#!=0
			if start!=pointer
				sd c;set c pointer;sub c start
				call write(outfile,start,c)
			end
			char bs=asciibs;char b#1;char *#2
			set b map#
			if b=(zr)
				call sprintf(#b,"%03o",pointer#)
				call write(outfile,#bs,4)
			else
				call write(outfile,#bs,2)
			end
			set start pointer
			inc start
		end
		inc pointer
	end
	if start!=pointer
		sub pointer start
		call write(outfile,start,pointer)
	end
	callg writeq(outfile)
end
function write_string_ex(sv pbuffer,sd outfile) #not also at string_pop? will extra lseek and error ask at src
	charx multiline#1;datax sz#1;valuex pointer#1
	call get_multistring(pbuffer,#multiline,#sz,#pointer)
	callg write_string(outfile,multiline,sz,pointer)
end
function write_popstring(ss pointer,sd sz,sd outfile) #has an upper write_allow check
	call writecl(outfile) #write {}, can work for char*?see at declare
	add sz pointer
	if pointer!=sz
		call fprintu(outfile,pointer#)
		inc pointer
		while pointer!=sz
			call writec(outfile)
			call fprintu(outfile,pointer#)
			inc pointer
		end
	end
	callg writecr(outfile)
end
