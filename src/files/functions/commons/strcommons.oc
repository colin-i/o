
#advance the content/size by value
Function advancecursors(data ptrcontent,data ptrsize,data nr)
	Str content#1
	Data size#1
	Set content ptrcontent#
	Set size ptrsize#
	Add content nr

	#take nr if nr>0 or -nr if nr<0. was ok in one case at enumcomma backward
	#Data zero=0;If nr<zero;SetCall nr neg(nr);EndIf

	Sub size nr
	Set ptrcontent# content
	Set ptrsize# size
EndFunction

#advance the content/size by one
Function stepcursors(data ptrcontent,data ptrsize)
	Data one=1
	Call advancecursors(ptrcontent,ptrsize,one)
EndFunction


#String in mem; return size(if string is not),size before string(if string is)
Function stringinmem(str content,data size,str match)
	Data zero=0
	Data nrsz#1
	SetCall nrsz strlen(match)
	If size<nrsz
		Return size
	EndIf
	Str cnt#1
	Set cnt content
	Data sz#1
	Set sz size
	Data b#1
	While sz>=nrsz
		SetCall b memcmp(cnt,match,nrsz)
		If b=zero
			Set nrsz sz
			Inc nrsz
		EndIf
		If b!=zero
			Inc cnt
			Dec sz
		EndIf
	EndWhile
	If b=zero
		Sub cnt content
		return cnt
	EndIf
	Return size
EndFunction
#and this same logic, +1, -1, like there are no 32bit asm instructions
Function stringatmem(ss content,sd size,ss match)
	sd nrsz
	SetCall nrsz strlen(match)
	If size<nrsz
		Return size
	EndIf
	sd sz;set sz nrsz
	while nrsz>0
		if content#!=match#
			return size
		endif
		dec nrsz
		inc content
		inc match
	endwhile
	return sz
EndFunction

#bool
#AB to ab
#match have size
Function stratmem(data pcontent,data psize,str match)
	Data nrsz=0
	Data sz=0
	Str content=0
	Data zero=0
	Data one=1
	Data sizetorun=0

	SetCall nrsz strlen(match)
	Set sz psize#
	Set content pcontent#

	If sz<nrsz
		Return zero
	EndIf

	Set sizetorun nrsz
	While sizetorun!=zero
		Char a_from_az={a_from_az}
		Char z_from_az={z_from_az}
		Char b#1
		Char c#1

		Set b content#
		If b>=a_from_az
			If b<=z_from_az
				Sub b (AZ_to_az)
			EndIf
		EndIf
		Set c match#
		If b!=c
			Return zero
		EndIf
		Inc content
		Inc match
		Dec sizetorun
	EndWhile
	Set pcontent# content
	Sub sz nrsz
	Set psize# sz
	Return one
EndFunction

#new size
function find_whitespaceORcomment(ss content,sd size)
#size is greater than zero but this is not a problem here
	ss end;set end content;add end size
	ss start;set start content
	while content!=end
		char b#1;set b content#
		if b=(commentascii)
			sub content start
			return content
		endif
		sd bool
		setcall bool is_whitespace(b)
		if bool=(TRUE)
			sub content start
			return content
		endif
		inc content
	endwhile
	sub content start
	return content
endfunction
#bool
function is_whitespace(char c)
	if c=(asciispace)
		return (TRUE)
	endif
	if c=(asciitab)
		return (TRUE)
	endif
	return (FALSE)
endfunction
data warn_hidden_whitespaces_times#1
const warn_hidden_whitespaces_times_p^warn_hidden_whitespaces_times
#err
function warn_hidden_whitespaces(sd inc)
	sd p%p_hidden_pref
	if p#=(TRUE)
		data warn_hidden_whitespaces_times_p%warn_hidden_whitespaces_times_p
		if warn_hidden_whitespaces_times_p#=0
		#show once
			sd goodwrongstring
			setcall goodwrongstring errorDefOut("Hidden whitespaces at :",inc)
			call safeMessage(goodwrongstring)
			inc warn_hidden_whitespaces_times_p#
		endif
		sd w%p_w_as_e
		if w#=(TRUE)
			return ""
		endif
	endif
	return (noerror)
endfunction
#err
function warn_hidden_whitespaces_after(sd inc,sd dot_comma_end)
	if dot_comma_end=0
		callret warn_hidden_whitespaces(inc)
	endif
	return (noerror)
endfunction

#pointer
function mem_spaces(ss content,ss last)
	while content!=last
		sd bool;setcall bool is_whitespace(content#)
		if bool=(FALSE)
			return content
		endif
		inc content
	endwhile
	return content
endfunction
Function spaces_helper(ss cursor,sd size)
	sd end;set end cursor;add end size
	while cursor!=end
		sd b
		setcall b is_whitespace(cursor#)
		if b=(TRUE)
			inc cursor
		else
			return cursor
		endelse
	endwhile
	return cursor
endfunction
#spaces;return 1 if at least one spc/tab;0 otherwise
Function spaces(sv pcontent,sd psize)
	sd start;set start pcontent#
	setcall pcontent# spaces_helper(pcontent#,psize#)
	if pcontent#=start
		return (FALSE)
	endif
	sub start pcontent#
	add psize# start
	return (TRUE)
EndFunction
Function notspaces_helper(ss cursor,sd size)
	sd end;set end cursor;add end size
	while cursor!=end
		sd b
		setcall b is_whitespace(cursor#)
		if b=(FALSE)
			inc cursor
		else
			return cursor
		endelse
	endwhile
	return cursor
endfunction
Function notspaces(sv pcontent,sd psize)
	sd start;set start pcontent#
	setcall pcontent# notspaces_helper(pcontent#,psize#)
	sub start pcontent#
	add psize# start
EndFunction

#bool;return 1 or 0
Function stringsatmemspc(sv pcontent,sd psize,ss match,sd spacereq,ss extstr,sd extbool,sv intercursors)
#												    attention here there is a sd but not working on entire long, so sd is ok
	Data content#1
	Data size#1
	Data bool#1
	Data tocontent^content
	Data tosize^size
	Data zero=FALSE
	Data nonzero=TRUE

	Set content pcontent#
	Set size psize#
	SetCall bool stratmem(tocontent,tosize,match)
	If bool=zero
		Return zero
	EndIf

	If extstr!=zero
		SetCall extbool# stratmem(tocontent,tosize,extstr)
		if intercursors!=(NULL)
			#to work around ...xcall, ...g[if]
			Set intercursors# content
			add intercursors :
			set intercursors#d^ size
		endif
	EndIf

	If spacereq=nonzero
		SetCall bool spaces(tocontent,tosize)
		IF bool=zero
			Return zero
		EndIf
	EndIf
	Set pcontent# content
	Set psize# size
	Return nonzero
EndFunction

#return stringsatmemspc
Function stratmemspc(data pcontent,data psize,str match,data spacereq)
	Data null=NULL
	callret stringsatmemspc(pcontent,psize,match,spacereq,null,null,null)
EndFunction

#used at quotinmem and quotescaped
function bytescaped(sv _content,ss content,sd _dif)
	sd byte
	inc content
	set byte content#
	if byte=(asciix) #test if raw
		inc content
		sd a;set a hexnr(content#)
		if a!=(nothex_value)
			inc content
			sd b;set b hexnr(content#)
			if b!=(nothex_value)
				mult a 0x10
				or a b
				set _content# content
				set _dif# 3
				return a
			end
			dec content
		end
		dec content
	end
	char map={0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  10, 11, 12, 13, 14,         15, 16,      17, 18,           19, 20,      21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31}
	char   *={32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46,         47, asciinul,49, 50,           51, 52,      53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63}
	char   *={64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78,         79, 80,      81, 82,           83, 84,      85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95}
	char   *={96, 97, 98, 99, 100,101,102,103,104,105,106,107,108,109,asciireturn,111,112,     113,asciicarriage,115,asciitab,117,118,119,120,121,122,123,124,125,126,127}
	char   *={128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,        143,144,     145,146,          147,148,     149,150,151,152,153,154,155,156,157,158,159}
	char   *={160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,        175,176,     177,178,          179,180,     181,182,183,184,185,186,187,188,189,190,191}
	char   *={192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,        207,208,     209,210,          211,212,     213,214,215,216,217,218,219,220,221,222,223}
	char   *={224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,        239,240,     241,242,          243,244,     245,246,247,248,249,250,251,252,253,254,255}
	ss m^map
	add m byte
	set _content# content
	set _dif# 1
	return m#
endfunction

#return the escaped char and change the size and cursor
Function quotescaped(sv pcontent,sd psize,sd p_is_multiline)
	ss content
	Char bs=asciibs
	charx byte#1
	Set content pcontent#
	set byte content#
	if byte!=bs
		if p_is_multiline!=(NULL)
			if p_is_multiline#=(Xfile_string_multiline_no)
				whiletrue
					if byte!=(asciireturn)
						if byte!=(asciicarriage)
							break
						endif
					endif
					set p_is_multiline# (Xfile_string_multiline_yes)
					break
				endwhile
			endif
		endif
		Return byte
	EndIf
	sd dif
	set byte bytescaped(pcontent,content,#dif)
	sub psize# dif
	return byte
EndFunction

#err
function quotinmem_err(ss content,sd pquotsz,sd pescapes,sd null_ok)
	Char quotation=asciidoublequote
	Char bs=asciibs
	Char bnull=0

	sd aux;set aux content
	Set pescapes# 0
	# quotes_forward was called already at ;area , the string has a good end, and nulls are not ok at include/import/library but tolerated at decl/arg
	while content#!=quotation
		sd byte;set byte content#
		if byte=bs
			sd dif
			set byte bytescaped(#content,content,#dif)
			add pescapes# dif
		else
			call quotes_new_line(content)
		endelse
		if byte=bnull
			if null_ok=(FALSE)
				return "Null will break the include/import/library statement."
			endif
		endif
		inc content
	endwhile
	sub content aux
	Set pquotsz# content
	return (noerror)
EndFunction
#err
Function quotinmem(sv ptrcontent,sd ptrsize,sd pquotsz,sd pescapes)
	Char quotation={asciidoublequote,0}
	vStr pquotation^quotation
	sd intnr
	SetCall intnr stratmem(ptrcontent,ptrsize,pquotation)
	If intnr=0
		Return "Expecting quotation mark."
	EndIf
	callret quotinmem_err(ptrcontent#,pquotsz,pescapes,(FALSE))
endfunction
Function quotinmem_started(sv ptrcontent,sd ptrsize,sd pquotsz,sd pescapes)
	call stepcursors(ptrcontent,ptrsize)
	callret quotinmem_err(ptrcontent#,pquotsz,pescapes,(FALSE))
EndFunction
Function quotinmem_started_blind(sv ptrcontent,sd ptrsize,sd pquotsz,sd pescapes)
	call stepcursors(ptrcontent,ptrsize)
	callret quotinmem_err(ptrcontent#,pquotsz,pescapes,(TRUE))
EndFunction
Function quotinmem_started_blind_noerr(sv ptrcontent,sd ptrsize,sd pquotsz,sd pescapes)
	call stepcursors(ptrcontent,ptrsize)
	call quotinmem_err(ptrcontent#,pquotsz,pescapes,(TRUE)) #null_ok will continue there
EndFunction
Function quotinmem_noerr(sv ptrcontent,sd ptrsize,sd pquotsz,sd pescapes)
	call stepcursors(ptrcontent,ptrsize)
	Call quotinmem_err(ptrcontent#,pquotsz,pescapes) #null_ok is irelevant, spelling was already
EndFunction
Function quotinmem_size_noerr(sv ptrcontent,sd ptrsize,sd pquotsz)
	call stepcursors(ptrcontent,ptrsize)
	sd escapes
	Call quotinmem_err(ptrcontent#,pquotsz,#escapes) #null_ok is irelevant, spelling was already
EndFunction

#err
function maxpathverif(str safecurrentdirtopath,str logextension)
	data size1#1
	data size2#1
	setcall size1 strlen(safecurrentdirtopath)
	setcall size2 strlen(logextension)
	add size1 size2
	inc size1

	callret compareagainstmaxpath(size1)
endfunction

function quotes_new_line(ss content)
	if content#=(asciireturn)
		inc content
		set main.textlinestart content
		add main.totalnewlines main.linesadd
	end
endfunction
#err
function quotes_forward(sd p_content,ss last)#,sd p_newlines,sd p_lastlinestart)
#this version is knowing that the first char is "
	char delim=asciidoublequote
	ss content
	set content p_content#
	str unend="end string (\") expected"
	sd escapes=0
	inc content
	if content=last
		return unend
	endif
	while content#!=delim
		char escape_c=asciibs
		while content#=escape_c
			if escapes=0
				set escapes 1
			else
				set escapes 0
			endelse
			inc content
			if content=last
				set p_content# content
				return unend
			endif
		endwhile
		if escapes=1
			inc content
			set escapes 0
		else
			if content#!=delim
				call quotes_new_line(content)
				inc content
			endif
		endelse
		if content=last
			set p_content# content
			return unend
		endif
	endwhile
	inc content
	set p_content# content
	return (noerror)
endfunction
