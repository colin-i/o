
#err
function xfile_add_declare_base(sd decltype,sd is_stack,sd is_expand,sd is_signed,sv pcontent,sd psize)
	sd err
	if is_stack=(TRUE)
		setcall err xfile_add_char((Xfile_declfield_stack))
	else
		setcall err xfile_add_char((Xfile_declfield_data))
		if err=(noerror)
			if is_expand=(TRUE)
				setcall err xfile_add_char((Xfile_declfield_data_expand))
			else
				setcall err xfile_add_char((Xfile_declfield_data_concrete))
			endelse
		endif
	endelse
	if err=(noerror)
		if decltype<=(Xfile_decltype_longByte) #default to no
			if is_signed=(Xfile_declext_no)
				setcall err xfile_add_char((Xfile_declext_no))
			else
				setcall err xfile_add_char((Xfile_declext_yes))
			endelse
		else #default to yes
			if is_signed=(Xfile_declext_no)
				setcall err xfile_add_char((Xfile_declext_yes))
			else
				setcall err xfile_add_char((Xfile_declext_no))
			endelse
		endelse
		if err=(noerror)
			setcall err xfile_add_char(decltype)
			if err=(noerror)
				ss content;set content pcontent#
				if content#!=(pointingsign)  #examples:in ..) or in ..= or one of the assign..expected
					callret xfile_add_char((Xfile_declvolatile_no))
				endif
				if psize!=(NULL)
					call stepcursors(pcontent,psize)
					if psize#=0 #this is the very rare case when the rare case at vars_log_prepare is not: x_file,not object,end of file,do not compare unallocated space
						return vars_log_prepare.varname
					endif
				endif
				callret xfile_add_char((Xfile_declvolatile_yes))
			endif
		endif
	endif
	return err
endfunction

#err
function xfile_add_declare_fndec_if(sd decltype,sd is_stack,sd is_expand,sd is_signed,ss content,sd size)
	if main.xfile!=(openno)
		sd err
		setcall err xfile_add_declare_ex(decltype,is_stack,is_expand,is_signed,content,size) #1 ignored
		if err=(noerror)
			add main.xprotooff_pending (bsz+bsz+bsz+bsz) #declfield,declext,decltype,declvolatile
			if is_stack=(FALSE) #declfield_data
				inc main.xprotooff_pending
			endif
		endif
	endif
	return (noerror)
endfunction
function xfile_add_declare_dec_if(sd decltype,sd is_stack,sd is_expand,sd is_signed,ss content,sd size,sd sign,sd reloc,sd relocx,sd subtype)
	if main.xfile!=(openno)
		sd err
		setcall err xfile_add_declare_ex(decltype,is_stack,is_expand,is_signed,content,size,subtype)
		if err=(noerror)
			if sign=(assignsign)
				if reloc=(FALSE)
					callret xfile_add_char((Xfile_declsign_equal))
				end
				if relocx=(FALSE)
					callret xfile_add_char((Xfile_declsign_ereloc))
				end
				callret xfile_add_char((Xfile_declsign_erelocx))
			end
			if sign=(reservesign)
				callret xfile_add_char((Xfile_declsign_reserve))
			end
			if sign=(pointersigndeclare)
				callret xfile_add_char((Xfile_declsign_pointer))
			end
			#if sign=(nosign) reserve#1 but need to add N=1
			setcall err xfile_add_char((Xfile_declsign_reserve))
			if err=(noerror)
				char n1={Xfile_numbers_prefix_none,Xfile_numbers_type_tdecimal,1,0,0,0,asciione,Xfile_numbers_done}
				callret writefile_errversion(main.xfile,#n1,\.n1)
			endif
		endif
		return err
	endif
	return (noerror)
endfunction
#err
function xfile_add_declare_ex(sd decltype,sd is_stack,sd is_expand,sd is_signed,ss content,sd size,sd subtype)
	sd err
	if decltype=(Xfile_decltype_const)
		setcall err xfile_add_char((Xfile_declfield_const))
		if err=(noerror)
			if subtype=(cCONST)
				setcall err xfile_add_char((Xfile_declfield_const_normal))
			else # cCONSTIF
				setcall err xfile_add_char((Xfile_declfield_const_cond))
			endelse
		endif
	else
		setcall err xfile_add_declare_base(decltype,is_stack,is_expand,is_signed,#content,#size)
		if err=(noerror)
			if content#=(throwlesssign) #examples:in ..) or in ..= or one of the assign..expected
				setcall err xfile_add_char((Xfile_declfeature_throwless))
				call stepcursors(#content,#size)
			elseif content#=(unrefsign)
				setcall err xfile_add_char((Xfile_declfeature_unref))
				call stepcursors(#content,#size)
			else
				setcall err xfile_add_char((Xfile_declfeature_normal))
			endelse
		endif
	endelse
	if err=(noerror)
		callret xfile_add_string(content,size)
	endif
	return err
endfunction

#err
function xfile_add_fndef_if(sd content,sd sz,sd fn)
	if main.xfile!=(openno)
		sd err
		setcall err xfile_add_top((Xfile_functiondef))
		if err=(noerror)
			setcall err xfile_add_char(fn)
			if err=(noerror)
				if main.varargs=0  #now this also at normal function at otoc, and not watching here if is for global or for a struct
					setcall err xfile_add_char((Xfile_function_va_no))
				else
					setcall err xfile_add_char((Xfile_function_va_yes))
					inc main.xprotooff_pending  ##somehow extra at entry/entryraw
				endelse
				if err=(noerror)
					setcall err xfile_add_string(content,sz)
					if err=(noerror)
						whiletrue
							if fn!=(cENTRY)
								add main.xprotooff_pending sz  ##after entry xprotooffs are useless
								if fn!=(cFUNCTIONX)
									setcall main.xstruct tellfile(main.xfile,#err)
									if main.xstruct!=(unierror)
										set main.xstruct_dregx main.datasecSize ##also need to differentiate from a dummy function
										#and since long/long*, also datasecReg
										set main.xstruct_dreg main.datasecReg
										if fn=(cENTRYRAW) #must remeber the offset for global sizeof at otoc
											call xfile_entry_offset(sz,main.xstruct)
										else #also must set structbit
											value ptrfunctions%%ptr_functions
											setcall main.xstruct_fn vars_ignoreref(content,sz,ptrfunctions)
											sub main.xstruct_fn main.functions
										endelse
										setcall err xfile_add_char((Xfile_function_t_normal))
									endif
									break
								endif
							else
								sd off;set off tellfile(main.xfile,#err)
								if off!=(unierror)
									call xfile_entry_offset(sz,off)
								endif
								#else
								#	break
							endelse
							#if main.varargs=0
							#else
							break
						endwhile
					endif
				endif
			endif
		endif
		return err
	endif
	return (noerror)
endfunction
function xfile_entry_offset(sd sz,sd off)
	neg sz        ##-content
	add sz off    ##here-content
	sub sz (dwsz) ##here-string(sz+content)
	call lseek(main.xfile,0,(SEEK_SET))
	call write(main.xfile,#sz,(xfile_entry_offset_size))
	call lseek(main.xfile,0,(SEEK_END)) #already was tellfile
endfunction
function xfile_fndef_structstart_if()
	if main.xfile!=(openno)
		value code%%ptr_codesec
		call getcontReg(code,#main.xstruct_reg)
	endif
endfunction
function xfile_structdef(sd b)
	call lseek(main.xfile,b,(SEEK_SET))
	char a=Xfile_function_t_struct
	call write(main.xfile,#a,(bsz))
end
function xfile_fndef_structend_if(sd el_or_e)
	if main.xstruct!=(unierror)
		datax reg#1
		value code%%ptr_codesec
		call getcontReg(code,#reg)
		if reg=main.xstruct_reg
			whiletrue
				if el_or_e=(el_or_e_nothing) #break if no data/datax
					if main.xstruct_dregx=main.datasecSize
						if main.xstruct_dreg=main.datasecReg
							break
						end
					end
					call xfile_structdef(main.xprotooff) #main.xstruct was ok, proto is before this
					call xfile_structdef(main.xstruct)

					call lseek(main.xfile,0,(SEEK_END)) #what if on extra? will return -1 but will move. to test, a next SEEK_CUR will be -1, and write?
					set main.xstruct (unierror)

					#and structbit
					add main.xstruct_fn main.functions
					add main.xstruct_fn (maskoffset)
					or main.xstruct_fn# (structbit)
				else #at entryraw must be full empty(stack are not counted at this moment), only for global variables here
					if main.xstruct_dregx!=main.datasecSize
						if main.xstruct_dreg!=main.datasecReg
							break
						end
					end
					call xfile_structdef(main.xprotooff)
					call xfile_structdef(main.xstruct)
					#why to seek end if this is the last write
					#why to set xstruct again?
				endelse
				break
			endwhile
		endif
	endif
endfunction
function xfile_fndef_structend_protooff_if()
	if main.xfile!=(openno)
		#this is somehow extra after entryraw/entry
		add main.xprotooff main.xprotooff_pending
		#and add the fixed part to the next protooff
		add main.xprotooff (bsz+dwsz+dwsz+bsz+bsz)
		set main.xprotooff_pending 0
	end
endfunction

#err
function xfile_add_varsufix_if(sd content,sd size,sd sufix,sd cast)
	if main.xfile!=(openno)
		sd err;setcall err xfile_add_string(content,size)
		if err=(noerror)
			setcall err xfile_add_char(sufix)
			if sufix=(Xfile_suffix_true)
				if err=(noerror)
					callret xfile_add_char(cast)
				endif
			endif
		endif
		return err
	endif
	return (noerror)
endfunction

data xf_commas#1;data xf_pos#1
#err
function xfile_prepare_commas_if()
	if main.xfile!=(openno)
		sd err
		setcall main.xf_pos tellfile(main.xfile,#err)
		if main.xf_pos=(unierror)
			return err
		endif
	endif
	set main.xf_commas 0  # outside if? is used at var size for declare
	return (noerror)
endfunction
function xfile_inc_commas()#_if()         same as prepare_commas
	#if main.xfile!=(openno)            same
	inc main.xf_commas
	#endif
endfunction
#err
function xfile_add_commas_if()
	if main.xfile!=(openno)
		sd err
		sd off;setcall off tellfile(main.xfile,#err)
		if off=(unierror);return err;endif
		sub off main.xf_pos
		sd mem
		setcall err mem_alloc(off,#mem)
		if err=(noerror)
			sd sz
			setcall sz lseek(main.xfile,main.xf_pos,(SEEK_SET)) #no err? is safe to seek back.
			call read(main.xfile,mem,off)                       #same approach
			call lseek(main.xfile,main.xf_pos,(SEEK_SET))       #
			setcall err xfile_add_int(main.xf_commas)           #err on back write? smallest write is hex : where : is only 3 bytes, here are 4
			if err=(noerror)
				setcall err writefile_errversion(main.xfile,mem,off)
			endif
			call free(mem)
		endif
		return err
	endif
	return (noerror)
endfunction
#err
function xfile_add_commas_interncall_if(sd content,sd size,sd sz)
	if main.xfile!=(openno)
		sd p;setcall p nr_of_args_64need_p_get();set p# 0
		sd err
		SetCall err enumcommas(#content,#size,sz,(FALSE),(pass_calls)) #there are 7 more arguments but are not used
		if err=(noerror)
			callret xfile_add_int(p#)
		endif
		return err
	endif
	return (noerror)
endfunction

#err
function xfile_add_call_if(sd content,sd size,sd subtype)
	if main.xfile!=(openno)
		sd err
		and subtype (x_callx_flag|x_callg_flag)
		if subtype=0
			setcall err xfile_add_char((Xfile_arg_call_normal)) #not forced extern
		elseif subtype=(x_callx_flag)
			setcall err xfile_add_char((Xfile_arg_call_extern)) #forced extern
		elseif subtype=(x_callg_flag)
			setcall err xfile_add_char((Xfile_arg_call_skipaftercall))
		else
		#if subtype!0
			setcall err xfile_add_char((Xfile_arg_call_extern|Xfile_arg_call_skipaftercall))
		endelse
		if err=(noerror)
			callret xfile_add_string(content,size)
		endif
		return err
	endif
	return (noerror)
endfunction
#err
function xfile_add_callret(sd action,sd subtype)
	sd err

	setcall err xfile_add_top(action)
	if err=(noerror)
		#this can go also with primsec with a test against CALL_primsec, add that flag at getcommand, but still there is a wrong cosmetic at subtype_test=0 and not subtype_test=CALL_primsec in a case
		setcall subtype callret_flag(subtype)
		if subtype=0
			callret xfile_add_char((Xfile_call_normal))
		endif
		callret xfile_add_char((Xfile_call_ret))
	endif

	return err
endfunction
#err
function xfile_add_callret_if(sd subtype)
	if main.xfile!=(openno)
		callret xfile_add_callret((Xfile_callex),subtype)
	endif
	return (noerror)
endfunction
#err
function xfile_add_callret_wrap(sd subtype)
	if main.xfile!=(openno)
		if main.parses=(pass_init)
			if main.innerfunctionreturn=(FALSE)
				setcall subtype callret_flag(subtype)
				if subtype!=0
					set main.innerfunctionreturn (TRUE)
				endif
			endif
		elseif main.parses=(pass_write)
			callret xfile_add_callret((Xfile_call),subtype)
		endelseif
	endif
	return (noerror)
endfunction

#err
function xfile_add_end_if(sd type)
	if main.xfile!=(openno)
		sd err;setcall err xfile_add_top((Xfile_end))
		if err=(noerror)
			callret xfile_add_char(type)
		endif
	endif
	return (noerror)
endfunction
#err
function xfile_add_end_cond_ifif()
	if main.parses=(pass_write)
		callret xfile_add_end_if((Xfile_end_cond))
	endif
	return (noerror)
endfunction

#err
function xfile_add_format_if(sd format,sd ignore)
	if main.xfile!=(openno)
		sd err
		setcall err xfile_add_top((Xfile_format))
		if err=(noerror)
			if format=(elf_unix)
				sd ptrobject%ptrobject
				if ptrobject#=(TRUE)
					sd b;setcall b is_for_64()
					if b=(TRUE)
						if ignore=(FALSE)
							callret xfile_add_char((Xfile_format_elfobj64))
						endif
						callret xfile_add_char((Xfile_format_elfobj64ig))
					endif
					if ignore=(FALSE)
						callret xfile_add_char((Xfile_format_elfobj))
					endif
					callret xfile_add_char((Xfile_format_elfobjig))
				endif
				callret xfile_add_char((Xfile_format_elf))
			endif
			callret xfile_add_char((Xfile_format_exe))
		endif
	endif
	return (noerror)
endfunction

#err
function xfile_add_import_if(sd subtype,sv content,sd size,sd impescapes)
	if main.xfile!=(openno)
		if main.innerfunction=(TRUE)
			return "It is not possible to write Import in functions and .x file at the same time." # Xfile_proto_* is write() later
		end
		sd err
		setcall err xfile_add_top((Xfile_import))
		if err=(noerror)
			setcall err xfile_add_char(subtype)
			if err=(noerror)
				callret addtosecstresc_xfile_if(#content,#size,size,impescapes,main.ptrtempdata)
			endif
		endif
	endif
	return (noerror)
endfunction
function xfile_add_import_nr_if(ss content,ss valsize)
	if main.xfile!=(openno)
		sd err
		ss cursor=-1;add cursor valsize
		whiletrue
			if cursor#!=(asciiv)
				if cursor#!=(asciiV)
					setcall err xfile_add_char((Xfile_function_va_no))
					break
				endif
			endif
			setcall err xfile_add_char((Xfile_function_va_yes))
			dec valsize
			if valsize=content
				if err=(noerror)
					callret xfile_add_int(0)
				endif
				return (noerror)
			endif
			break
		endwhile
		if err=(noerror)
			sd val
			sub valsize content
			sd bool;setcall bool memtoint(content,valsize,#val,(FALSE))
			if bool=(TRUE)
				callret xfile_add_int(val)
			endif
			return "Positive integer expected for import arguments number."
		endif
	endif
	return (noerror)
endfunction
function xfile_add_import_nr0_if(ss content,ss valsize)
	if main.xfile!=(openno)
		sd err
		setcall err xfile_add_char((Xfile_function_va_no))
		If err=(noerror)
			callret xfile_add_int(0)
		endIf
	endif
	return (noerror)
endfunction

#err
function xfile_add_library_if(sv pcontent,sd psize)
	if main.xfile!=(openno)
		sd err
		setcall err xfile_add_top((Xfile_library))
		if err=(noerror)
			Datax impquotsz#1
			Datax impescapes#1
			Call quotinmem_noerr(pcontent,psize,#impquotsz,#impescapes) #the spelling errors were at pass init
			setcall err addtosecstresc_xfile_if(pcontent,psize,impquotsz,impescapes,main.ptrtempdata)
			#here a low chances error, not a spelling error, spelling was at pass init
			call advancecursors(pcontent,psize,psize#)
		endif
		return err
	endif
	call advancecursors(pcontent,psize,psize#)
	return (noerror)
endfunction

function xfile_proto_if()
	if main.xfile!=(openno)
		if main.innerfunctionreturn=(FALSE)
			set main.innerfunctionreturn (TRUE)
		endif
	endif
endfunction
function xfile_protostart_if(sd content,sd size)
	if main.xfile!=(openno)
		sd err
		setcall err xfile_add_char((Xfile_proto))
		if err=(noerror)
			setcall err xfile_add_char((Xfile_function_t_normal))
			if err=(noerror)
				setcall err xfile_add_string(content,size)
			endif
		endif
		return err
	endif
	return (noerror)
endfunction
#err
function xfile_proto_done_if()
	if main.xfile!=(openno)
		sd err
		if main.innerfunctionreturn=(FALSE)
			setcall err xfile_add_char((Xfile_proto_void))
		else
			setcall err xfile_add_char((Xfile_proto_long))
			set main.innerfunctionreturn (FALSE)
		endelse
		return err
	endif
	return (noerror)
endfunction

#err
function xfile_proto_arg_if(sd type,sd is_stack,sd is_expand,sd is_signed,ss content)
	if main.xfile!=(openno)
		callret xfile_add_declare_base(type,is_stack,is_expand,is_signed,#content,(NULL))
	endif
	return (noerror)
endfunction

#err
function xfile_add_pref_ifif(ss content,sd size)
	if main.parses=(pass_write)
		if main.xfile!=(openno)
			callret xfile_add_base((Xfile_numbers_type_tpref),content,size)
		endif
	endif
	return (noerror)
endfunction

function xfile_keep_cursor(sv pcontent,sd psize)
	sd err
	if main.xfile!=(openno)
		if main.xfile_top!=(Xfile_ignore_nosigns)
			inc main.xprotooff
		endif
		add main.xprotooff (bsz+bsz+bsz+dwsz+dwsz+dwsz+bsz)
		Datax impquotsz#1
		Call quotinmem_size_noerr(pcontent,psize,#impquotsz) #the spelling errors were at pass init
		add main.xprotooff impquotsz
		call advancecursors(pcontent,psize,impquotsz)
		call stepcursors(pcontent,psize)
		Call spaces(pcontent,psize)
		ss valsize;setcall valsize notspaces_helper(pcontent#,psize#) #was spelling
		sub valsize pcontent#
		add main.xprotooff valsize
		setcall err xfile_add_base((Xfile_import_name),pcontent#,valsize)
	else
		set err (noerror)
	endelse
	call advancecursors(pcontent,psize,psize#)
	return err
endfunction
