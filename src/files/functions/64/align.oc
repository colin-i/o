
value stackalign#1
data *stackalign_size#1
const ptrstackalign^stackalign

const align_calculation_size=dwsz
const function_calculation_sz=align_calculation_size+1   #1 for has stack variables

#er
function align_alloc(sd sz)
	inc sz   ##for entry
	mult sz (function_calculation_sz)
	sv s%ptrstackalign
	setcall s# memcalloc(sz) #need 0 by default
	if s#!=(NULL)
		add s :
		set s#d^ sz
		return (noerror)
	endif
	return (error)
endfunction
function align_free()
	sv s%ptrstackalign
	if s#!=(NULL)
		call free(s#)
	endif
endfunction

#er
function stack_align(sd nr)
	sd final_nr
	setcall final_nr pref_call_align(nr)
	if final_nr!=0
		and final_nr 1
		sd type;setcall type align_type()
		if type=(even_align)
			if final_nr=0
				return (noerror)
			endif
		elseif   final_nr!=0
				return (noerror)
		endelseif
		#Stack aligned on 16 bytes. Depending on the number of arguments
		vdata code%%ptr_codesec
		char align={REX_Operand_64,0x83,0xEC,8}
		callret addtosec(#align,(4),code)
	endif
	return (noerror)
endfunction
#0/2/nr
function pref_call_align(sd nr)
	data ptr_call_align%ptr_call_align
	sd type;set type ptr_call_align#
	if type!=(call_align_no)
	#1. was a debate at "yes for args and shadow", the point was to ignore shadow and align only the pushed args at next option "yes for args", example:
	#    1 pushed, counting shadow will align like 5 odd arguments, not counting shadow like 1 odd argument
	#    2 pushed, 6 even arguments, 2 even arguments
	#   is same with or without this option because shadow is even
	#2. another debate can be at no pushed args and shadow odd but is not the case
		sd conv;setcall conv convdata((convdata_total))
		if nr<=conv
			if type=(call_align_yes_all)
				return 2             #0 will not align, to align even, lin 6 even, win 4(also here is the shadow that is same, 4), args are on regs. was tested for <=conv
			endif
			#call_align_yes_pushedArgs
		else
			return nr                  ##convs are even, so nr-=conv is same
		endelse
	endif
	return 0
endfunction


#err
function align_ante(sd arguments)
	setcall arguments pref_call_align(arguments)
	if arguments!=0
		sd pointer
		#sd container%ptrstackAlign
		#wanting with three pass, the impXorfnX is not ready at first pass: call getcontplusReg(container,#pointer)
		#sub pointer (dwsz)
		#test if in a function
		#sd fnboolptr%globalinnerfunction
		#if fnboolptr#==(TRUE)
		#	sub pointer (dwsz)
		#endif
		setcall pointer align_ptype()
		sd test=1;and test arguments
		sd test2=0xffFF
		if test=0
		#even, put on low word
			inc pointer#
			and test2 pointer#
			if test2!=0
				return (noerror)
			endif
			return "More than 65535 even calls?"
		endif
		#odd, put on high word
		sd bag;set bag pointer#
		divu bag 0x10000
		inc bag
		and test2 bag
		if test2!=0
			#set to high word
			#this is not endian independent add pointer (wsz)
			#and pointer#s^ bag
			#or pointer#s^ bag
			#div bag 0x100
			#inc pointer
			#and pointer#s^ bag
			#or pointer#s^ bag

			mult bag 0x10000
			and pointer# (0xffFF)
			or pointer# bag
			return (noerror)
		endif
		return "More than 65535 odd calls?"
	endif
	return (noerror)
endfunction

function align_resolve()
	sv end%ptrstackalign
	sd pointer;set pointer end#
	add end :
	set end end#d^
	add end pointer
	while pointer!=end
		sd bag;set bag pointer#
		if bag!=0
			sd even=0xffFF;and even bag
			divu bag 0x10000
			if even>=bag
				set pointer# (even_align)
			else
				set pointer# (odd_align)
			endelse
		endif
		add pointer (function_calculation_sz)
	endwhile
endfunction

#ptype
function align_ptype()
	sd ptrfunctionTagIndex%ptrfunctionTagIndex
	sv container%ptrstackalign
	sd cont;set cont container#
	sd index=function_calculation_sz;mult index ptrfunctionTagIndex#
	add cont index
	return cont
endfunction
#pstack
function align_pstack()
	sd cont;setcall cont align_ptype()
	add cont (align_calculation_size)
	return cont
endfunction

#type
function align_type()
	sd cont;setcall cont align_ptype()
	return cont#
endfunction
#stack
function align_stack()
	ss cont;setcall cont align_pstack()
	return cont#
endfunction

#err
function align_entryscope()
	sd type;setcall type align_type()
	if type!=0
		#bt ebx,3 (offset 3) x8 or x0
		#rex to bt the first byte it is useless
		char bt={twobytesinstruction_byte1,bt_instruction,bt_reg_imm8|ebxregnumber,3}
		#j(c|nc);sub rbx,8
		char jump#1;char *=4;char *={REX_Operand_64,0x83,RegReg*tomod|(5*toregopcode)|ebxregnumber,8}
		if type=(even_align)
			#there are more even calls to align
			#Jump short if not carry
			set jump (jnc_instruction)
		else
			#odd
			#Jump short if carry
			set jump (0x72)
		endelse
		vdata code%%ptr_codesec
		callret addtosec(#bt,(4+6),code)
	endif
	return (noerror)
endfunction
